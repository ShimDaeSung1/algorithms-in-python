# 한 마을에 N명의 모험가가 있고, 모험가 길드에서는 모험가를 대상으로 '공포도'를 측정한다.
# 공포도가 X인 모험가는 반드시 X명 이상 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있다.
#  N명의 모험가에 대한 정보가 주어졌을 때, 여행을 떠날 수 있는 그룹 수의 최댓값 구하는 프로그램

#  입력 조건 : 첫째 줄에 모험가의 수 N이 주어진다.(1 <= N <= 100,000)
#              둘째 줄에 각 모험가의 공포도의 값을 N이하의 자연수로 주어지며, 각 자연수는 공백으로 구분
#  출력 조건 : 여행을 떠날 수 있는 그룹 수의 최댓값 출력


# 풀이 : 오름차순 정렬 이후, 공포도가 가장 낮은 모험가부터 확인
#        앞에서부터 공포도를 확인하여 '현재 그룹에 포함된 모험가의 수'가 '현재 확인하고 있는 공포도'
#        보다 크거나 같다면 이를 그룹으로 설정한다.

data = list(map(int, input("각 모험가의 공포도를 공백으로 구분하여 입력하시오 \n").split()))
data.sort() #오름차순으로 정렬

result = 0 # 총 그룹의 수
count = 0 # 현재 그룹에 포함된 모험가의 수

for i in data: # 공포도를 낮은 것부터 하나씩 확인하며
    count += 1 # 현재 그룹에 해당 모험가 포함시키기
    if count >= i: # 현재 그룹에 포함된 모험가의 수가 현재의 공포도 이상이라면, 그룹 결성
        result += 1 # 총 그룹의 수 증가
        count = 0 # 현재 그룹에 포함된 모험가의 수 초기화

print(result) # 총 그룹의 수 출력





