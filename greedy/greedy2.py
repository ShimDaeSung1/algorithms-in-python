#어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행
#두 번째 연산은 N이 K로 나누어 떨어질 때만 선택 가능

# 1. N에서 1을 뺀다.
# 2. N을 K로 나눈다.
# N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성한다.

# 입력 조건 : 첫째 줄에 N(1 <= N <= 100,000)과 K(2 =< K <= 100,000)가
# 공백을 기준으로 하여 각각 자연수로 주어진다.

# 출력 조건 : 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값 출력

# N, K를 공백을 기준으로 구분하여 값을 받는다.
n, k = map(int, input().split())

result = 0

while True:
    # N이 K로 나누어 떨어지는 수가 될 때까지 빼기
    target = (n // k) * k # N이 K로 나누어 떨어지지 않을 때, 가장 가까운 K로 나누어 떨어지는 수 얻기
    result += (n - target) # 나누어 떨어지는 수 까지 1을 빼는 횟수
    n = target

    # N이 K보다 작을 때 반복문 탈출
    if n < k :
        break
    else :
        result += 1
        n //= k

result += (n -1)
print(result)







